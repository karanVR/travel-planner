'use client';

import type { Metadata } from 'next';
import { Geist, Geist_Mono, Poppins } from 'next/font/google';
import './globals.css';
import {
  ClerkProvider,
  SignIn,
  SignInButton,
  SignedIn,
  SignedOut,
  UserButton,
} from '@clerk/nextjs';
import { useState } from 'react';
import { themeContext } from '../../lib/context';
import ThemeToggle from '../components/themeToggle';
import clsx from 'clsx';
import HeaderRightThemeToggle from '../components/headerRightThemeProfile';
import TpLogo from '../components/tpLogo';
import Navbar from '../components/navbar';
import useWindowDimensions from '../hooks/useWindowDimensions.hook';
import Sidebar from '../components/sidebar';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

const poppins = Poppins({
  variable: '--font-poppins',
  subsets: ['latin', 'latin-ext'],
  weight: ['400', '500', '600', '700', '800', '900'],
});

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [appTheme, setAppTheme] = useState<string>('light');
  const { width: windowWidth } = useWindowDimensions();
  return (
    <ClerkProvider>
      <themeContext.Provider value={{ appTheme, setAppTheme }}>
        <html lang="en">
          <body className={` ${poppins.variable} antialiased`}>
            <div
              className={clsx(
                'flex flex-col w-[100%] flex-grow-1 h-[100vh] justify-start px-6 py-4',
                { 'bg-black text-white': appTheme === 'dark' },
              )}
            >
              <header className="flex justify-between">
                <text className="font-bold text-2xl">
                  <TpLogo />
                </text>
                <HeaderRightThemeToggle />
              </header>
              <main>
                <SignedOut>
                  <div className="flex w-[100dvw] h-[100dvh] items-center justify-center">
                    <SignIn routing="hash" />
                  </div>
                </SignedOut>
                <SignedIn>
                  <div className="h-full relative">
                    <div className="hidden h-full md:flex md: flex-col md:w-72 md:fixed md: inset-y-0 z=[80] bg-gray-900">
                      <div>
                        <Sidebar />
                      </div>
                    </div>
                   {windowWidth!<740 && <main className="md:pl-72">
                      <Navbar /> 
                    </main>}
                    {children}
                  </div>
                </SignedIn>
                {/* <SignedIn>{windowWidth!<740?<Navbar />: <Sidebar />}{children}</SignedIn> */}
              </main>
            </div>
          </body>
        </html>
      </themeContext.Provider>
    </ClerkProvider>
  );
}
